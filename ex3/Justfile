set shell := ["bash", "-c"]

REVIEWS_BUCKET := "reviews"
PROCESSED_BUCKET := "reviews-processed"
STOPWORDS_BUCKET := "stopwords"
PROFANITY_RESULTS := "profanity"
SENTIMENT_RESULTS := "sentiment"
LAMBDA_ROLE_NAME := "review-processing-lambda-role"
LAMBDA_ROLE_ARN := "arn:aws:iam::000000000000:role/review-processing-lambda-role"

setup: s3 dynamo ssm roles lambdas triggers lambdas_util

s3:
    awslocal s3 mb s3://{{ REVIEWS_BUCKET }}
    awslocal s3 mb s3://{{ PROCESSED_BUCKET }}
    awslocal s3 mb s3://{{ STOPWORDS_BUCKET }}

    awslocal s3api put-object \
      --bucket {{ STOPWORDS_BUCKET }} \
      --key stopwords.txt \
      --body stopwords.txt

dynamo:
    awslocal dynamodb create-table \
        --table-name {{ PROFANITY_RESULTS }} \
        --attribute-definitions AttributeName=reviewerID,AttributeType=S \
        --key-schema AttributeName=reviewerID,KeyType=HASH \
        --billing-mode PAY_PER_REQUEST || echo "Table {{ PROFANITY_RESULTS }} already exists."

    awslocal dynamodb create-table \
        --table-name {{ SENTIMENT_RESULTS }} \
        --attribute-definitions AttributeName=review_id,AttributeType=S \
        --key-schema AttributeName=review_id,KeyType=HASH \
        --billing-mode PAY_PER_REQUEST || echo "Table {{ SENTIMENT_RESULTS }} already exists."

ssm:
    awslocal ssm put-parameter --name "/localstack-review-app/buckets/{{ REVIEWS_BUCKET }}" --type "String" --value {{ REVIEWS_BUCKET }} --overwrite
    awslocal ssm put-parameter --name "/localstack-review-app/buckets/{{ PROCESSED_BUCKET }}" --type "String" --value {{ PROCESSED_BUCKET }} --overwrite
    awslocal ssm put-parameter --name "/localstack-review-app/buckets/{{ STOPWORDS_BUCKET }}" --type "String" --value {{ STOPWORDS_BUCKET }} --overwrite

    awslocal ssm put-parameter --name "/localstack-review-app/tables/{{ PROFANITY_RESULTS }}" --type "String" --value {{ PROFANITY_RESULTS }} --overwrite
    awslocal ssm put-parameter --name "/localstack-review-app/tables/{{ SENTIMENT_RESULTS }}" --type "String" --value {{ SENTIMENT_RESULTS }} --overwrite

roles:
    echo $(awslocal iam create-role \
      --role-name {{ LAMBDA_ROLE_NAME }} \
      --assume-role-policy-document '{"Version": "2012-10-17","Statement": [{ "Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}' \
      --query 'Role.Arn' --output text || awslocal iam get-role --role-name {{ LAMBDA_ROLE_NAME }} --query 'Role.Arn' --output text)

    awslocal iam attach-role-policy --role-name {{ LAMBDA_ROLE_NAME }} --policy-arn "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    awslocal iam attach-role-policy --role-name {{ LAMBDA_ROLE_NAME }} --policy-arn "arn:aws:iam::aws:policy/AmazonS3FullAccess"
    awslocal iam attach-role-policy --role-name {{ LAMBDA_ROLE_NAME }} --policy-arn "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
    awslocal iam attach-role-policy --role-name {{ LAMBDA_ROLE_NAME }} --policy-arn "arn:aws:iam::aws:policy/AmazonSSMFullAccess"
    echo "Waiting for IAM role propagation..."
    sleep 10

lambdas:
    # --- Presign Lambda ---
    awslocal lambda delete-function --function-name presign &>/dev/null || true
    (cd lambdas/presign; rm -f lambda.zip; zip lambda.zip handler.py)
    awslocal lambda create-function \
      --function-name presign \
      --runtime python3.11 --timeout 10 \
      --zip-file fileb://lambdas/presign/lambda.zip \
      --handler handler.handler \
      --role {{ LAMBDA_ROLE_ARN }} \
      --environment "Variables={STAGE=local,REVIEWS_BUCKET={{ REVIEWS_BUCKET }}}"
    awslocal lambda create-function-url-config --function-name presign --auth-type NONE

    # --- Preprocessing Lambda ---
    awslocal lambda delete-function --function-name preprocessing &>/dev/null || true
    (cd lambdas/preprocessing; docker run --rm -v $(pwd):/var/task alpine rm -rf /var/task/lambda.zip /var/task/package || true; mkdir package; docker run --rm -v $(pwd):/var/task -w /var/task python:3.11-slim bash -c "pip install -r requirements.txt -t package"; cd package; zip -r ../lambda.zip .; cd ..; zip lambda.zip handler.py)
    awslocal lambda create-function \
      --function-name preprocessing \
      --runtime python3.11 --timeout 10 \
      --zip-file fileb://lambdas/preprocessing/lambda.zip \
      --handler handler.preprocess \
      --role {{ LAMBDA_ROLE_ARN }} \
      --environment "Variables={STOPWORDS_BUCKET={{ STOPWORDS_BUCKET }},PROCESSED_BUCKET={{ PROCESSED_BUCKET }},STOPWORDS_KEY=stopwords.txt}"

    # --- Profanity Check Lambda ---
    awslocal lambda delete-function --function-name profanity-check &>/dev/null || true
    (cd lambdas/profanity-check; docker run --rm -v $(pwd):/var/task alpine rm -rf /var/task/lambda.zip /var/task/package || true; mkdir package; docker run --rm -v $(pwd):/var/task -w /var/task python:3.11-slim bash -c "pip install -r requirements.txt -t package"; cd package; zip -r ../lambda.zip .; cd ..; zip lambda.zip handler.py)
    awslocal lambda create-function \
      --function-name profanity-check \
      --runtime python3.11 --timeout 10 \
      --zip-file fileb://lambdas/profanity-check/lambda.zip \
      --handler handler.handler \
      --role {{ LAMBDA_ROLE_ARN }} \
      --environment "Variables={PROFANITY_RESULTS={{ PROFANITY_RESULTS }}}"

    # --- Sentiment Analysis Lambda ---
    awslocal lambda delete-function --function-name sentiment-analysis &>/dev/null || true
    (cd lambdas/sentiment-analysis; docker run --rm -v $(pwd):/var/task alpine rm -rf /var/task/lambda.zip /var/task/package || true; mkdir package; docker run --rm -v $(pwd):/var/task -w /var/task python:3.11-slim bash -c "pip install -r requirements.txt -t package"; cd package; zip -r ../lambda.zip .; cd ..; zip lambda.zip handler.py)
    awslocal lambda create-function \
      --function-name sentiment-analysis \
      --runtime python3.11 --timeout 10 \
      --zip-file fileb://lambdas/sentiment-analysis/lambda.zip \
      --handler handler.handler \
      --role {{ LAMBDA_ROLE_ARN }} \
      --environment "Variables={SENTIMENT_RESULTS={{ SENTIMENT_RESULTS }}}"

lambdas_util:
    (cd lambdas/list; rm -f lambda.zip; zip lambda.zip handler.py)
    (cd lambdas/db_list; rm -f lambda.zip; zip lambda.zip handler.py)

    # --- List Bucket Reviews ---
    awslocal lambda delete-function --function-name list-reviews &>/dev/null || true
    awslocal lambda create-function \
      --function-name list-reviews \
      --runtime python3.11 --timeout 10 \
      --zip-file fileb://lambdas/list/lambda.zip \
      --handler handler.handler \
      --role {{ LAMBDA_ROLE_ARN }} \
      --environment "Variables={STAGE=local,BUCKET_NAME={{ REVIEWS_BUCKET }}}"
    awslocal lambda create-function-url-config --function-name list-reviews --auth-type NONE

    # --- List Bucket Preprocessing ---
    awslocal lambda delete-function --function-name list-preprocessing &>/dev/null || true
    awslocal lambda create-function \
      --function-name list-preprocessing \
      --runtime python3.11 --timeout 10 \
      --zip-file fileb://lambdas/list/lambda.zip \
      --handler handler.handler \
      --role {{ LAMBDA_ROLE_ARN }} \
      --environment "Variables={STAGE=local,BUCKET_NAME={{ PROCESSED_BUCKET }}}"
    awslocal lambda create-function-url-config --function-name list-preprocessing --auth-type NONE

    # --- List Dynamo Profanity ---
    awslocal lambda delete-function --function-name db_list-profanity &>/dev/null || true
    awslocal lambda create-function \
      --function-name db_list-profanity \
      --runtime python3.11 --timeout 10 \
      --zip-file fileb://lambdas/db_list/lambda.zip \
      --handler handler.handler \
      --role {{ LAMBDA_ROLE_ARN }} \
      --environment "Variables={STAGE=local,TABLE_NAME={{ PROFANITY_RESULTS }}}"
    awslocal lambda create-function-url-config --function-name db_list-profanity --auth-type NONE

    # --- List Dynamo Sentiment ---
    awslocal lambda delete-function --function-name db_list-sentiment &>/dev/null || true
    awslocal lambda create-function \
      --function-name db_list-sentiment \
      --runtime python3.11 --timeout 10 \
      --zip-file fileb://lambdas/db_list/lambda.zip \
      --handler handler.handler \
      --role {{ LAMBDA_ROLE_ARN }} \
      --environment "Variables={STAGE=local,TABLE_NAME={{ SENTIMENT_RESULTS }}}"
    awslocal lambda create-function-url-config --function-name db_list-sentiment --auth-type NONE

triggers:
    # Trigger for Preprocessing and Sentiment Analysis
    awslocal s3api put-bucket-notification-configuration \
      --bucket {{ REVIEWS_BUCKET }} \
      --notification-configuration "{\"LambdaFunctionConfigurations\":[{\"LambdaFunctionArn\":\"arn:aws:lambda:us-east-1:000000000000:function:preprocessing\",\"Events\":[\"s3:ObjectCreated:*\"]}, {\"LambdaFunctionArn\":\"arn:aws:lambda:us-east-1:000000000000:function:sentiment-analysis\",\"Events\":[\"s3:ObjectCreated:*\"]}]}"

    # Trigger for Profanity Check
    awslocal s3api put-bucket-notification-configuration \
      --bucket {{ PROCESSED_BUCKET }} \
      --notification-configuration "{\"LambdaFunctionConfigurations\":[{\"LambdaFunctionArn\":\"arn:aws:lambda:us-east-1:000000000000:function:profanity-check\",\"Events\":[\"s3:ObjectCreated:*\"]}]}"
